{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if not localgov_base_remove_css %}
  {{ attach_library('localgov_base/page-sections') }}
{% endif %}

{% if paragraph.localgov_width_of_section.value %}
  {% set width = paragraph.localgov_width_of_section.value %}
{% endif %}

{% if paragraph.localgov_bg_colour_of_section.value %}
  {% set bg_colour = paragraph.localgov_bg_colour_of_section.value %}
{% endif %}

{% if paragraph.localgov_padding_top_section.value %}
  {% set padding_top = paragraph.localgov_padding_top_section.value %}
{% endif %}

{% if paragraph.localgov_padding_bottom_section.value %}
  {% set padding_bottom = paragraph.localgov_padding_bottom_section.value %}
{% endif %}

{% if paragraph.field_margin_regions.value %}
  {% set margin_regions = paragraph.field_margin_regions.value %}
{% endif %}

{% if paragraph.field_margin_after_regions.value %}
  {% set margin_after_regions = paragraph.field_margin_after_regions.value %}
{% endif %}

{% if paragraph.field_section_arc_top.value %}
  {% set section_arc_top = true %}
{% endif %}

{% if paragraph.field_section_arc_bottom.value %}
  {% set section_arc_bottom = true %}
{% endif %}

{%
  set classes = [
    'lgd-page-section',
    width ? 'lgd-page-section--' ~ width : 'lgd-container padding-horizontal',
    section_arc_top ? 'lgd-page-section--arc-top',
    section_arc_bottom ? 'lgd-page-section--arc-bottom',
    width == 'full-width' ? 'padding-horizontal',
    width == 'contained-content' ? 'padding-horizontal',
    width == 'contained-content' ? 'lgd-container',
    bg_colour ? 'lgd-page-section--has-bg-colour' : 'lgd-page-section--no-bg-colour',
    bg_colour ? 'lgd-page-section--bg-' ~ bg_colour|clean_class,
    padding_top ? 'lgd-page-section--padding-top-' ~ padding_top|clean_class,
    padding_bottom ? 'lgd-page-section--padding-bottom-' ~ padding_bottom|clean_class,
    margin_regions ? 'lgd-page-section--regions-margin-' ~ margin_regions|clean_class,
    margin_after_regions ? 'lgd-page-section--margin-after-' ~ margin_after_regions|clean_class,
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{% if section_arc_top %}
  <div class="lgd-page-section__arc lgd-page-section__arc--top {{ bg_colour ? 'lgd-page-section--bg-' ~ bg_colour|clean_class }} ">
    <svg width="1278" height="139" viewBox="0 0 1278 139" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 139L1278 139V55.6247C692.4 -75.9228 182 56.3967 0 139Z" fill="#00843D"/>
    </svg>
  </div>
{% endif %}
<div{{ attributes.addClass(classes) }}>


  {% if width == 'full-width-contained-content' %}
    <div class="lgd-container">
    {% elseif width == 'contained-breakout' %}
      <div class="lgd-container lgd-container--mega">
  {% endif %}

    {{ content }}

  {% if width == 'full-width-contained-content' or width == 'contained-breakout' %}
    </div>
  {% endif %}

</div>

{% if section_arc_bottom %}
  <div class="lgd-page-section__arc lgd-page-section__arc--bottom {{ bg_colour ? 'lgd-page-section--bg-' ~ bg_colour|clean_class }}">
    <svg width="1278" height="139" viewBox="0 0 1278 139" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M1278 0.000106812L1.21518e-05 -4.91479e-06L4.86287e-06 83.3752C585.6 214.923 1096 82.6033 1278 0.000106812Z" fill="#00843D"/>
    </svg>
  </div>
{% endif %}
